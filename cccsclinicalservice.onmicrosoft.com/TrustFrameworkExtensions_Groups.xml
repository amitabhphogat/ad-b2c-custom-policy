<?xml version="1.0" encoding="utf-8"?>
<TrustFrameworkPolicy xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://schemas.microsoft.com/online/cpim/schemas/2013/06" PolicySchemaVersion="0.3.0.0" 
  TenantId="cccsclinicalservice.onmicrosoft.com" 
  PolicyId="B2C_1A_TrustFrameworkExtensions_RBAC" 
  PublicPolicyUri="http://cccsclinicalservice.onmicrosoft.com/B2C_1A_TrustFrameworkExtensions_RBAC">

  <BasePolicy>
    <TenantId>cccsclinicalservice.onmicrosoft.com</TenantId>
    <PolicyId>B2C_1A_TrustFrameworkExtensions</PolicyId>
  </BasePolicy>

  <BuildingBlocks>
    <ClaimsSchema>
      <!--Stores the domain portion of the sign-in email address-->
      <ClaimType Id="signInName">
          <DisplayName>firstname.lastname@conduent.com</DisplayName>
          <UserHelpText>Email address to use for signing in.</UserHelpText>
          <Restriction>
              <Pattern RegularExpression="^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$" HelpText="The email you provided is not valid." />
          </Restriction>
      </ClaimType>
      <ClaimType Id="identityProviders">
          <DisplayName>IdentityProviders</DisplayName>
          <DataType>stringCollection</DataType>
          <UserHelpText>User identity providers</UserHelpText>
      </ClaimType>
      <ClaimType Id="domainParameter">
          <DisplayName>domainParameter</DisplayName>
          <DataType>string</DataType>
          <UserHelpText>parsed domain value from url</UserHelpText>
      </ClaimType>
      <ClaimType Id="knownDomain">
          <DisplayName>knownDomain</DisplayName>
          <DataType>string</DataType>
          <UserHelpText>if this a domain that is a customer</UserHelpText>
      </ClaimType>
      <ClaimType Id="isKnownCustomer">
          <DisplayName>knownDomain</DisplayName>
          <DataType>boolean</DataType>
          <UserHelpText>if this a domain that is a customer</UserHelpText>
      </ClaimType>
      <ClaimType Id="dummyTrue">
          <DisplayName>dummy value for comparison</DisplayName>
          <DataType>string</DataType>
          <UserHelpText/>
      </ClaimType>
      <ClaimType Id="groups">
        <DisplayName>Collection of group membership IDs</DisplayName>
        <DataType>stringCollection</DataType>
      </ClaimType>
      <ClaimType Id="group_1">
        <DisplayName>Group 1</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="group_2">
        <DisplayName>Group 2</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="group_3">
        <DisplayName>Group 3</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="roles">
        <DisplayName>User's assigned Roles</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
       <ClaimType Id="role">
        <DisplayName>Role to Check</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="userExists">
        <DisplayName>User Exists in Clinical Service Identity system</DisplayName>
        <DataType>boolean</DataType>
      </ClaimType>
      <ClaimType Id="isMemberOfAllowGroup">
      	<DisplayName>isMemberOfAllowGroup</DisplayName>
      	<DataType>boolean</DataType>
      </ClaimType>
      <ClaimType Id="identityProviderAccessToken">
        <DisplayName>Identity Provider Access Token</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>Stores the access token of the identity provider.</AdminHelpText>
      </ClaimType>
      <ClaimType Id="identityProviderRefreshToken">
        <DisplayName>Identity provider refresh token</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="grant_type">
        <DisplayName>Grant type</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="scope">
        <DisplayName>scope</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="bearerToken">
        <DisplayName>Bearer token</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="responseMsg">
      	<DisplayName>Error</DisplayName>
      	<DataType>string</DataType>
      	<UserInputType>Paragraph</UserInputType>
      </ClaimType>
    </ClaimsSchema>

    <ClaimsTransformations>
      <ClaimsTransformation Id="AddGroup_1" TransformationMethod="AddItemToStringCollection">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="group_1" TransformationClaimType="item" />
          <InputClaim ClaimTypeReferenceId="groups" TransformationClaimType="collection" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="groups" TransformationClaimType="collection" />
        </OutputClaims>
      </ClaimsTransformation>

      <ClaimsTransformation Id="AddGroup_2" TransformationMethod="AddItemToStringCollection">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="group_2" TransformationClaimType="item" />
          <InputClaim ClaimTypeReferenceId="groups" TransformationClaimType="collection" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="groups" TransformationClaimType="collection" />
        </OutputClaims>
      </ClaimsTransformation>

      <ClaimsTransformation Id="AddGroup_3" TransformationMethod="AddItemToStringCollection">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="group_3" TransformationClaimType="item" />
          <InputClaim ClaimTypeReferenceId="groups" TransformationClaimType="collection" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="groups" TransformationClaimType="collection" />
        </OutputClaims>
      </ClaimsTransformation>

      <ClaimsTransformation Id="CheckIfMemberOfAllowGroup" TransformationMethod="StringCollectionContainsClaim">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="groups" TransformationClaimType="collection"/>
          <InputClaim ClaimTypeReferenceId="role" TransformationClaimType="item" />
        </InputClaims>
        <InputParameters>
          <InputParameter  Id="ignoreCase" DataType="string" Value="true"/>
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="isMemberOfAllowGroup" TransformationClaimType="outputClaim"/>
        </OutputClaims>
      </ClaimsTransformation>
      <!--Demo: Gets the domain portion of the sign-in email address-->
      <ClaimsTransformation Id="ParseDomain" TransformationMethod="ParseDomain">
          <InputClaims>
              <InputClaim ClaimTypeReferenceId="signInName" TransformationClaimType="emailAddress" />
          </InputClaims>
          <OutputClaims>
              <OutputClaim ClaimTypeReferenceId="domainParameter" TransformationClaimType="domain" />
          </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="DomainLookup" TransformationMethod="LookupValue">
          <InputClaims>
              <InputClaim ClaimTypeReferenceId = "domainParameter" TransformationClaimType="inputParameterId" />
          </InputClaims>
          <InputParameters>
              <InputParameter Id="conduent.com" DataType="string" Value="true" />              
              <InputParameter Id="errorOnFailedLookup" DataType="boolean" Value="false" />
          </InputParameters>
          <OutputClaims>
              <OutputClaim ClaimTypeReferenceId = "knownDomain" TransformationClaimType="outputClaim" />
          </OutputClaims>
      </ClaimsTransformation>

      <ClaimsTransformation Id="CheckDomainParameterValue" TransformationMethod="CompareClaims">
          <InputClaims>
              <InputClaim ClaimTypeReferenceId="knownDomain" TransformationClaimType="inputClaim1" />
              <InputClaim ClaimTypeReferenceId="dummyTrue" TransformationClaimType="inputClaim2" />
          </InputClaims>
          <InputParameters>
              <InputParameter Id="operator" DataType="string" Value="EQUAL" />
              <InputParameter Id="ignoreCase" DataType="string" Value="true" />
          </InputParameters>
          <OutputClaims>
              <OutputClaim ClaimTypeReferenceId="isKnownCustomer" TransformationClaimType="outputClaim" />
          </OutputClaims>
      </ClaimsTransformation>

      <ClaimsTransformation Id="CreateidentityProvidersCollection" TransformationMethod="AddItemToStringCollection">
          <InputClaims>
              <InputClaim ClaimTypeReferenceId="domainParameter" TransformationClaimType="item" />
              <InputClaim ClaimTypeReferenceId="identityProviders" TransformationClaimType="collection" />
          </InputClaims>
          <OutputClaims>
              <OutputClaim ClaimTypeReferenceId="identityProviders" TransformationClaimType="collection" />
          </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="ConvertRolesStringCollectionToCommaDelimiterString" TransformationMethod="StringJoin">
        <InputClaims>
        <InputClaim ClaimTypeReferenceId="groups" TransformationClaimType="inputClaim" />
        </InputClaims>
        <InputParameters>
          <InputParameter DataType="string" Id="delimiter" Value="," />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="roles" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
    </ClaimsTransformations>
  </BuildingBlocks>

  <ClaimsProviders>  
    <ClaimsProvider>
      <Domain>conduent.onmicrosoft</Domain>
      <DisplayName>Login using Conduent login</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="AADConduent-OpenIdConnectRBAC">
          <DisplayName>Clinical Services Employee</DisplayName>
          <Description>Login with your Conduent account</Description>
          <Protocol Name="OpenIdConnect"/>
          <Metadata>
            <Item Key="METADATA">https://login.microsoftonline.com/1aed4588-b8ce-43a8-a775-989538fd30d8/v2.0/.well-known/openid-configuration</Item>
            <Item Key="client_id">4dea137d-d29b-4908-9d66-3ea2ac868fd4</Item>
            <Item Key="response_types">code</Item>
            <Item Key="scope">openid profile user.read</Item>
            <Item Key="response_mode">form_post</Item>
            <Item Key="HttpBinding">POST</Item>
            <Item Key="UsePolicyInRedirectUri">false</Item>
            <Item Key="ClaimTypeOnWhichToEnable">identityProviders</Item>
            <Item Key="ClaimValueOnWhichToEnable">conduent.com</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="client_secret" StorageReferenceId="B2C_1A_ConduentAADSecret"/>
          </CryptographicKeys>
          <InputClaims>
            <!--pass the login_hint to Azure AD home realm discovery page-->
            <InputClaim ClaimTypeReferenceId="signInName" PartnerClaimType="login_hint" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="issuerUserId" PartnerClaimType="oid"/>
            <OutputClaim ClaimTypeReferenceId="tenantId" PartnerClaimType="tid"/>
            <OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="given_name"/>
            <OutputClaim ClaimTypeReferenceId="surName" PartnerClaimType="family_name"/>            
            <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name"/>
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" AlwaysUseDefaultValue="true"/>
            <OutputClaim ClaimTypeReferenceId="identityProvider" PartnerClaimType="iss"/>
            <OutputClaim ClaimTypeReferenceId="sub" PartnerClaimType="sub"/>
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="email" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
            <OutputClaim ClaimTypeReferenceId="identityProviderAccessToken" PartnerClaimType="{oauth2:access_token}" />
            <OutputClaim ClaimTypeReferenceId="identityProviderRefreshToken" PartnerClaimType="{oauth2:refresh_token}" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName"/>
            <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName"/>
            <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId"/>
            <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId"/>            
          </OutputClaimsTransformations>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin"/>          
          <EnabledForUserJourneys>OnItemExistenceInStringCollectionClaim</EnabledForUserJourneys>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <ClaimsProvider>
      <DisplayName>Graph REST APIs</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="REST-AcquireAccessTokenForGraph">
          <DisplayName>Acquire Token</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://login.microsoftonline.com/cccsclinicalservice.onmicrosoft.com/oauth2/v2.0/token</Item>
            <Item Key="AuthenticationType">Basic</Item>
            <Item Key="SendClaimsIn">Form</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="BasicAuthenticationUsername" StorageReferenceId="B2C_1A_MSGraphClientId" />
            <Key Id="BasicAuthenticationPassword" StorageReferenceId="B2C_1A_MSGraphClientSecret" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="grant_type" DefaultValue="client_credentials" />
            <InputClaim ClaimTypeReferenceId="scope" DefaultValue="https://graph.microsoft.com/.default" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="bearerToken" PartnerClaimType="access_token" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
        </TechnicalProfile>

        <!-- Call Microsoft Graph API to get group claims-->
        <TechnicalProfile Id="REST-GetGroupMembership">
          <DisplayName>Get user's groups using Graph API</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://graph.microsoft.com/v1.0/users/{objectId}/transitiveMemberOf?$select=id,displayName</Item>
            <Item Key="SendClaimsIn">Url</Item>
            <Item Key="AuthenticationType">Bearer</Item>
            <Item Key="UseClaimAsBearerToken">bearerToken</Item>
            <Item Key="IncludeClaimResolvingInClaimsHandling">true</Item>
            <Item Key="ClaimResolverUrlFormatting">true</Item>
            <Item Key="ResolveJsonPathsInJsonTokens">true</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" /> 
            <InputClaim ClaimTypeReferenceId="bearerToken" /> 
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="group_1" DefaultValue="" PartnerClaimType="value[0].displayName" />
            <OutputClaim ClaimTypeReferenceId="group_2" DefaultValue="" PartnerClaimType="value[1].displayName" />
            <OutputClaim ClaimTypeReferenceId="group_3" DefaultValue="" PartnerClaimType="value[2].displayName" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="AddGroup_1" />
            <OutputClaimsTransformation ReferenceId="AddGroup_2" />
            <OutputClaimsTransformation ReferenceId="AddGroup_3" />
            <OutputClaimsTransformation ReferenceId="CheckIfMemberOfAllowGroup" />
            <OutputClaimsTransformation ReferenceId="ConvertRolesStringCollectionToCommaDelimiterString" />
          </OutputClaimsTransformations>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
        </TechnicalProfile>

        <TechnicalProfile Id="ShowBlockPage">
          <DisplayName>Show Block message</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted</Item>
            <Item Key="setting.showContinueButton">false</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="responseMsg" DefaultValue="You are not a member of a required security group." />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="responseMsg" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <ClaimsProvider>
      <DisplayName>Clinical Management API</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="REST-GetUserGroup">
          <DisplayName>Check loyaltyId Azure Function web hook</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <!-- Set the ServiceUrl with your own REST API endpoint -->
            <Item Key="ServiceUrl">https://clinical-api-dev.services.conduent.com/Management/api/users/groups</Item>
            <Item Key="SendClaimsIn">Url</Item>
            <Item Key="AuthenticationType">Bearer</Item>
            <Item Key="UseClaimAsBearerToken">identityProviderAccessToken</Item>
            <Item Key="IncludeClaimResolvingInClaimsHandling">true</Item>
            <Item Key="ClaimResolverUrlFormatting">true</Item>
            <Item Key="ResolveJsonPathsInJsonTokens">true</Item>
          </Metadata>
          <InputClaims>            
            <InputClaim ClaimTypeReferenceId="identityProviderAccessToken" /> 
          </InputClaims>
           <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="userExists" DefaultValue="false" />
            <OutputClaim ClaimTypeReferenceId="groups" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CheckIfMemberOfAllowGroup" />
            <OutputClaimsTransformation ReferenceId="ConvertRolesStringCollectionToCommaDelimiterString" />
          </OutputClaimsTransformations>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <!--This technical profile collects the sign-in email address and extracts the sign-in domain name -->
    <ClaimsProvider>
      <DisplayName>Parse domain parameter</DisplayName>
      <TechnicalProfiles>
          <TechnicalProfile Id="HRDLogic">
              <DisplayName>ParseDomainHint</DisplayName>
              <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
              <Metadata>
                  <Item Key="IncludeClaimResolvingInClaimsHandling">true</Item>
              </Metadata>
              <InputClaims>
                  <InputClaim ClaimTypeReferenceId="dummyTrue" DefaultValue="true"/>
                  <InputClaim ClaimTypeReferenceId="signInName"/>
              </InputClaims>
              <OutputClaims>
                  <OutputClaim ClaimTypeReferenceId="identityProviders"/>
                  <OutputClaim ClaimTypeReferenceId="knownDomain" />
              </OutputClaims>
              <OutputClaimsTransformations>
                  <OutputClaimsTransformation ReferenceId="ParseDomain" />
                  <OutputClaimsTransformation ReferenceId="DomainLookup" />
                  <OutputClaimsTransformation ReferenceId="CheckDomainParameterValue" />
                  <OutputClaimsTransformation ReferenceId="CreateidentityProvidersCollection" />
              </OutputClaimsTransformations>
              <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
          </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <!--Demo: This technical profile collects the sign-in email address and extracts the sign-in domain name -->
    <ClaimsProvider>
        <DisplayName>Local Account</DisplayName>
        <TechnicalProfiles>
            <TechnicalProfile Id="SelfAsserted-Signin-Email">
                <DisplayName>Local Account Signin</DisplayName>
                <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                <Metadata>
                    <Item Key="ContentDefinitionReferenceId">api.selfasserted</Item>
                </Metadata>
                <IncludeInSso>false</IncludeInSso>
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="signInName" />
                </InputClaims>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="signInName" Required="true" />
                </OutputClaims>
                <UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD" />
            </TechnicalProfile>
        </TechnicalProfiles>
    </ClaimsProvider>

    <!-- Disable Sign Up-->
    <ClaimsProvider>
        <DisplayName>Local Account</DisplayName>
        <TechnicalProfiles>
            <TechnicalProfile Id="SelfAsserted-LocalAccountSignin-Email">
                <Metadata>
                    <Item Key="setting.showSignupLink">false</Item>
                </Metadata>
            </TechnicalProfile>
        </TechnicalProfiles>
    </ClaimsProvider>
  </ClaimsProviders>

  <UserJourneys>
    <UserJourney Id="ConduentADSignInRBAC">
      <OrchestrationSteps>
        <OrchestrationStep Order="1" Type="ClaimsExchange">
          <ClaimsExchanges>
			      <ClaimsExchange Id="SigninEmailExchange" TechnicalProfileReferenceId="SelfAsserted-Signin-Email" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
              <ClaimsExchange Id="ParseDomainHintLogic" TechnicalProfileReferenceId="HRDLogic" />
          </ClaimsExchanges>
        </OrchestrationStep>        
        <!-- If the domain_hint did not match any known domain, then redirect to a Error Page-->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
            <Preconditions>
                <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                    <Value>isKnownCustomer</Value>
                    <Value>True</Value>
                    <Action>SkipThisOrchestrationStep</Action>
                </Precondition>
            </Preconditions>
            <ClaimsExchanges>
              <ClaimsExchange Id="NotAutorizedDomain" TechnicalProfileReferenceId="ShowBlockPage" />
            </ClaimsExchanges>
        </OrchestrationStep>
        <!-- If the domain matched any known domain, then this step will have a single IdP
                    enabled due to each known IdP TP having an enablement flag via identityProviders claim -->
        <OrchestrationStep Order="4" Type="ClaimsProviderSelection" ContentDefinitionReferenceId="api.idpselections">
            <Preconditions>
                <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                    <Value>isKnownCustomer</Value>
                    <Value>True</Value>
                    <Action>SkipThisOrchestrationStep</Action>
                </Precondition>
            </Preconditions>
          <ClaimsProviderSelections>
            <ClaimsProviderSelection TargetClaimsExchangeId="Conduent-OAuth-Rest" />
          </ClaimsProviderSelections>
        </OrchestrationStep>

        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>objectId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
              <Value>isKnownCustomer</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="Conduent-OAuth-Rest" TechnicalProfileReferenceId="AADConduent-OpenIdConnectRBAC" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <!-- For social IDP authentication, attempt to find the user account in the directory. -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadUsingAlternativeSecurityId" TechnicalProfileReferenceId="AAD-UserReadUsingAlternativeSecurityId-NoError" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Show self-asserted page only if the directory does not have the user account already (i.e. we do not have an objectId). 
          This can only happen when authentication happened using a social IDP. If local account was created or authentication done
          using ESTS in step 2, then an user account must exist in the directory by this time. -->
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>objectId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAsserted-Social" TechnicalProfileReferenceId="SelfAsserted-Social" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- This step reads any user attributes that we may not have received when authenticating using ESTS so they can be sent 
          in the token. -->
        <OrchestrationStep Order="8" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>socialIdpAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <OrchestrationStep Order="9" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="REST-GetUserGroup" TechnicalProfileReferenceId="REST-GetUserGroup" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <OrchestrationStep Order="10" Type="ClaimsExchange">
        <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>userExists</Value>
              <Value>true</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="REST-AcquireAccessTokenForGraph" TechnicalProfileReferenceId="REST-AcquireAccessTokenForGraph" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <OrchestrationStep Order="11" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>userExists</Value>
              <Value>true</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="REST-GetGroupMembership" TechnicalProfileReferenceId="REST-GetGroupMembership" />
          </ClaimsExchanges>
        </OrchestrationStep>
        
        <OrchestrationStep Order="12" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>isMemberOfAllowGroup</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="ShowBlockPage" TechnicalProfileReferenceId="ShowBlockPage" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <!-- The previous step (SelfAsserted-Social) could have been skipped if there were no attributes to collect 
             from the user. So, in that case, create the user in the directory if one does not already exist 
             (verified using objectId which would be set from the last step if account was created in the directory. -->
        <OrchestrationStep Order="13" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>objectId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserWrite" TechnicalProfileReferenceId="AAD-UserWriteUsingAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="14" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />

      </OrchestrationSteps>
      <ClientDefinition ReferenceId="DefaultWeb" />
    </UserJourney>
   </UserJourneys>
</TrustFrameworkPolicy>